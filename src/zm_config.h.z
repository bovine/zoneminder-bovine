//
// ZoneMinder Configuration, $Date$, $Revision$
// Copyright (C) 2003  Philip Coombes
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 

#include "config.h"
#include "zm_config_defines.h"

#define ZM_VERSION				"<from zmconfig>"	// ZoneMinder verson number
#define ZM_DB_SERVER			"<from zmconfig>"	// Machine on which the database server is running
#define ZM_DB_NAME				"<from zmconfig>"	// Database containing the tables
#define	ZM_DB_USERA				"<from zmconfig>"	// Privileged DB user name, needs at least select, insert, update and delete privileges
#define	ZM_DB_PASSA				"<from zmconfig>"	// Privileged DB user password
#define	ZM_DB_USERB				"<from zmconfig>"	// Unprivileged DB user name, need just select privilege.
#define	ZM_DB_PASSB				"<from zmconfig>"	// Unprivileged DB user password
#define ZM_PATH_BIN				"<from zmconfig>";	// Path to binaries
#define ZM_PATH_WEB				"<from zmconfig>";	// Path to web files
#define ZM_PATH_CGI				"<from zmconfig>";	// Path to cgi files

#define ZM_MAX_IMAGE_WIDTH		2048				// The largest image we imagine ever handling
#define ZM_MAX_IMAGE_HEIGHT		1536				// The largest image we imagine ever handling
#define ZM_MAX_IMAGE_COLOURS	3					// The largest image we imagine ever handling
#define ZM_MAX_IMAGE_DIM		(ZM_MAX_IMAGE_WIDTH*ZM_MAX_IMAGE_HEIGHT)
#define ZM_MAX_IMAGE_SIZE		(ZM_MAX_IMAGE_DIM*ZM_MAX_IMAGE_COLOURS)

#define ZM_SCALE_SCALE			100					// The factor by which we bump up 'scale' to simulate FP
#define ZM_RATE_SCALE			100					// The factor by which we bump up 'rate' to simulate FP

class ConfigItem
{
private:
	char *name;
	char *value;
	char *type;

	mutable enum { CFG_BOOLEAN, CFG_INTEGER, CFG_DECIMAL, CFG_STRING } cfg_type;
	mutable union
	{
		bool boolean_value;
		int integer_value;
		double decimal_value;
		char *string_value;
	} cfg_value;
	mutable bool accessed;

public:
	ConfigItem( const char *p_name, const char *p_value, const char *const p_type );
	~ConfigItem();
	void ConvertValue() const;
	bool BooleanValue() const;
	int IntegerValue() const;
	double DecimalValue() const;
	const char *StringValue() const;

	inline operator bool() const
	{
		return( BooleanValue() );
	}
	inline operator int() const
	{
		return( IntegerValue() );
	}
	inline operator double() const
	{
		return( DecimalValue() );
	}
	inline operator const char *() const
	{
		return( StringValue() );
	}
};

class Config
{
private:
	int n_items;
	ConfigItem **items;

public:
	Config();
	~Config();

	void Load();
	const ConfigItem &Item( int id );
};

extern Config config;
