<?php
//
// ZoneMinder web configuration file, $Date$, $Revision$
// Copyright (C) 2003, 2004, 2005, 2006  Philip Coombes
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

//
// This section contains options substituted by the zmconfig.pl utility, do not edit these directly
//
define( "ZM_CONFIG", "@ZM_CONFIG@" );				// Path to config file

$cfg = fopen( ZM_CONFIG, "r") or die("Could not open config file.");
while ( !feof($cfg) )
{
	$str = fgets( $cfg, 256 );
	if ( preg_match( '/^\s*$/', $str )) { continue; }
	elseif ( preg_match( '/^\s*#/', $str )) { continue; }
	elseif ( preg_match( '/^\s*([^=\s]+)\s*=\s*(.+?)\s*$/', $str, $matches ))

	{
		define( $matches[1], $matches[2] );
	}
}
fclose( $cfg );

//
// This section is options normally derived from other options or configuration
//
define( "ZMU_PATH", ZM_PATH_BIN."/zmu" );				// Local path to the ZoneMinder Utility

//
// Alarm states
//
define( "STATE_IDLE", 0 );
define( "STATE_PREALARM", 1 );
define( "STATE_ALARM", 2 );
define( "STATE_ALERT", 3 );
define( "STATE_TAPE", 4 );

//
// DVR Control Commands
//

define( "MSG_CMD", 1 );
define( "MSG_DATA_WATCH", 2 );
define( "MSG_DATA_EVENT", 3 );

define( "CMD_NONE", 0 );
define( "CMD_PAUSE", 1 );
define( "CMD_PLAY", 2 );
define( "CMD_STOP", 3 );
define( "CMD_FASTFWD", 4 );
define( "CMD_SLOWFWD", 5 );
define( "CMD_SLOWREV", 6 );
define( "CMD_FASTREV", 7 );
define( "CMD_ZOOMIN", 8 );
define( "CMD_ZOOMOUT", 9 );
define( "CMD_PAN", 10 );
define( "CMD_SCALE", 11 );
define( "CMD_PREV", 12 );
define( "CMD_NEXT", 13 );
define( "CMD_SEEK", 14 );
define( "CMD_QUERY", 99 );

//
// These are miscellaneous options you won't normally need to change
//
define( "MAX_EVENTS", 10 );								// The maximum number of events to show in the monitor event listing
define( "RATE_BASE", 100 );								// The additional scaling factor used to help get fractional rates in integer format
define( "SCALE_BASE", 100 );							// The additional scaling factor used to help get fractional scales in integer format
define( "LEARN_MODE", false );							// Currently unimplemented, do not change

//
// Date and time formats, eventually some of these may end up in the language files
//
define( "DATE_FMT_CONSOLE_LONG", "D jS M, g:ia" );		// This is the main console date/time, date() or strftime() format
define( "DATE_FMT_CONSOLE_SHORT", "%H:%M" );			// This is the xHTML console date/time, date() or strftime() format

define( "STRF_FMT_DATETIME_DB", "%Y-%m-%d %H:%M:%S" );	// Strftime format for database queries, don't change

define( "STRF_FMT_DATETIME", "%c" );					// Strftime locale aware format for dates with times
define( "STRF_FMT_DATE", "%x" );						// Strftime locale aware format for dates without times
define( "STRF_FMT_TIME", "%X" );						// Strftime locale aware format for times without dates

define( "STRF_FMT_DATETIME_SHORT", "%y/%m/%d %H:%M:%S" ); // Strftime shorter format for dates with time, not locale aware
define( "STRF_FMT_DATETIME_SHORTER", "%m/%d %H:%M:%S" ); // Strftime shorter format for dates with time, not locale aware, used where space is tight

require_once( 'zm_db.php' );
loadConfig();

$default_user = array(
	"Username"=>"admin",
	"Password"=>"",
	"Language"=>"",
	"Enabled"=>1,
	"Stream"=>'View',
	"Events"=>'Edit',
	"Control"=>'Edit',
	"Monitors"=>'Edit',
	"Devices"=>'Edit',
	"System"=>'Edit',
);

switch ( $bandwidth )
{
	case "high" :
	{
		define( "ZM_WEB_REFRESH_MAIN", ZM_WEB_H_REFRESH_MAIN );			// How often (in seconds) the main console window refreshes
		define( "ZM_WEB_REFRESH_CYCLE", ZM_WEB_H_REFRESH_CYCLE );		// How often the cycle watch windows swaps to the next monitor
		define( "ZM_WEB_REFRESH_IMAGE", ZM_WEB_H_REFRESH_IMAGE );		// How often the watched image is refreshed (if not streaming)
		define( "ZM_WEB_REFRESH_STATUS", ZM_WEB_H_REFRESH_STATUS );		// How often the little status frame refreshes itself in the watch window
		define( "ZM_WEB_REFRESH_EVENTS", ZM_WEB_H_REFRESH_EVENTS );		// How often the event listing is refreshed in the watch window, only for recent events
		define( "ZM_WEB_DEFAULT_SCALE", ZM_WEB_H_DEFAULT_SCALE );		// What the default scaling factor applied to 'live' or 'event' views is (%)
		define( "ZM_WEB_DEFAULT_RATE", ZM_WEB_H_DEFAULT_RATE );			// What the default replay rate factor applied to 'event' views is (%)
		define( "ZM_WEB_VIDEO_BITRATE", ZM_WEB_H_VIDEO_BITRATE );		// What the bitrate of any streamed video should be
		define( "ZM_WEB_VIDEO_MAXFPS", ZM_WEB_H_VIDEO_MAXFPS );			// What the maximum frame rate of any streamed video should be
		define( "ZM_WEB_SCALE_THUMBS", ZM_WEB_H_SCALE_THUMBS );			// Image scaling for thumbnails, bandwidth versus cpu in rescaling
		define( "ZM_WEB_USE_STREAMS", ZM_WEB_H_USE_STREAMS );			// Whether to use streaming or stills for live and events views
		define( "ZM_WEB_EVENTS_VIEW", ZM_WEB_H_EVENTS_VIEW );			// What the default view of multiple events should be.
		define( "ZM_WEB_SHOW_PROGRESS", ZM_WEB_H_SHOW_PROGRESS );		// Whether to show the progress of replay in event view.
		break;
	}
	case "medium" : 
	{
		define( "ZM_WEB_REFRESH_MAIN", ZM_WEB_M_REFRESH_MAIN );			// How often (in seconds) the main console window refreshes
		define( "ZM_WEB_REFRESH_CYCLE", ZM_WEB_M_REFRESH_CYCLE );		// How often the cycle watch windows swaps to the next monitor
		define( "ZM_WEB_REFRESH_IMAGE", ZM_WEB_M_REFRESH_IMAGE );		// How often the watched image is refreshed (if not streaming)
		define( "ZM_WEB_REFRESH_STATUS", ZM_WEB_M_REFRESH_STATUS );		// How often the little status frame refreshes itself in the watch window
		define( "ZM_WEB_REFRESH_EVENTS", ZM_WEB_M_REFRESH_EVENTS );		// How often the event listing is refreshed in the watch window, only for recent events
		define( "ZM_WEB_DEFAULT_SCALE", ZM_WEB_M_DEFAULT_SCALE );		// What the default scaling factor applied to 'live' or 'event' views is (%)
		define( "ZM_WEB_DEFAULT_RATE", ZM_WEB_M_DEFAULT_RATE );			// What the default replay rate factor applied to 'event' views is (%)
		define( "ZM_WEB_VIDEO_BITRATE", ZM_WEB_M_VIDEO_BITRATE );		// What the bitrate of any streamed video should be
		define( "ZM_WEB_VIDEO_MAXFPS", ZM_WEB_M_VIDEO_MAXFPS );			// What the maximum frame rate of any streamed video should be
		define( "ZM_WEB_SCALE_THUMBS", ZM_WEB_M_SCALE_THUMBS );			// Image scaling for thumbnails, bandwidth versus cpu in rescaling
		define( "ZM_WEB_USE_STREAMS", ZM_WEB_M_USE_STREAMS );			// Whether to use streaming or stills for live and events views
		define( "ZM_WEB_EVENTS_VIEW", ZM_WEB_M_EVENTS_VIEW );			// What the default view of multiple events should be.
		define( "ZM_WEB_SHOW_PROGRESS", ZM_WEB_M_SHOW_PROGRESS );		// Whether to show the progress of replay in event view.
		break;
	}
	case "low" :
	{
		define( "ZM_WEB_REFRESH_MAIN", ZM_WEB_L_REFRESH_MAIN );			// How often (in seconds) the main console window refreshes
		define( "ZM_WEB_REFRESH_CYCLE", ZM_WEB_L_REFRESH_CYCLE );		// How often the cycle watch windows swaps to the next monitor
		define( "ZM_WEB_REFRESH_IMAGE", ZM_WEB_L_REFRESH_IMAGE );		// How often the watched image is refreshed (if not streaming)
		define( "ZM_WEB_REFRESH_STATUS", ZM_WEB_L_REFRESH_STATUS );		// How often the little status frame refreshes itself in the watch window
		define( "ZM_WEB_REFRESH_EVENTS", ZM_WEB_L_REFRESH_EVENTS );		// How often the event listing is refreshed in the watch window, only for recent events
		define( "ZM_WEB_DEFAULT_SCALE", ZM_WEB_L_DEFAULT_SCALE );		// What the default scaling factor applied to 'live' or 'event' views is (%)
		define( "ZM_WEB_DEFAULT_RATE", ZM_WEB_L_DEFAULT_RATE );			// What the default replay rate factor applied to 'event' views is (%)
		define( "ZM_WEB_VIDEO_BITRATE", ZM_WEB_L_VIDEO_BITRATE );		// What the bitrate of any streamed video should be
		define( "ZM_WEB_VIDEO_MAXFPS", ZM_WEB_L_VIDEO_MAXFPS );			// What the maximum frame rate of any streamed video should be
		define( "ZM_WEB_SCALE_THUMBS", ZM_WEB_L_SCALE_THUMBS );			// Image scaling for thumbnails, bandwidth versus cpu in rescaling
		define( "ZM_WEB_USE_STREAMS", ZM_WEB_L_USE_STREAMS );			// Whether to use streaming or stills for live and events views
		define( "ZM_WEB_EVENTS_VIEW", ZM_WEB_L_EVENTS_VIEW );			// What the default view of multiple events should be.
		define( "ZM_WEB_SHOW_PROGRESS", ZM_WEB_L_SHOW_PROGRESS );		// Whether to show the progress of replay in event view.
		break;
	}
	case "mobile" : // Very incomplete at present
	{
		define( "ZM_WEB_DEFAULT_RATE", ZM_WEB_P_DEFAULT_RATE );			// What the default replay rate factor applied to 'event' views is (%)
		define( "ZM_WEB_SCALE_THUMBS", ZM_WEB_P_SCALE_THUMBS );			// Image scaling for thumbnails, bandwidth versus cpu in rescaling
		break;
	}
}

function loadConfig()
{
	global $config;
	global $config_cats;

	$config = array();
	$config_cat = array();

	$sql = "select * from Config order by Id asc";
	$result = mysql_query( $sql );
	if ( !$result )
		echo mysql_error();
	$monitors = array();
	while( $row = mysql_fetch_assoc( $result ) )
	{
		define( $row['Name'], $row['Value'] );
		$config[$row['Name']] = $row;
		if ( !($config_cat = &$config_cats[$row['Category']]) )
		{
			$config_cats[$row['Category']] = array();
			$config_cat = &$config_cats[$row['Category']];
		}
		$config_cat[$row['Name']] = $row;
	}
	//print_r( $config );
	//print_r( $config_cats );
}

?>
